library(CellChat)
library(patchwork)
library(Seurat)
library(dplyr)
library(multtest)
library(metap)

options(stringsAsFactors = FALSE)

setwd("~/Desktop/Applied_Genomics/BMEC/brain_ldsc")
data3.data <- Read10X(data.dir = "filtered_feature_bc_matrix/")

# Initialize the Seurat object with the raw (non-normalized data)
# Filter mt

data3 <- CreateSeuratObject(counts = data3.data, project = "db",
                            min.cells = 3, min.features = 200)

data3[["percent.mt"]] <- PercentageFeatureSet(data3, pattern = "^mt-")
data3 <- subset(data3, subset = nFeature_RNA > 200 & nFeature_RNA < 8000
                & percent.mt < 20 & nCount_RNA > 400)

dbdb_cells=colnames(data3)[(grep ("-1",colnames(data3)))]
dbm_cells=colnames(data3)[(grep ("-2",colnames(data3)))]

data3_dbdb <- subset(x = data3, cells = dbdb_cells)
data3_dbm <- subset(x = data3, cells = dbm_cells)

dbdbbrain.list <- list(data3_dbdb, data3_dbm)


# normalize and identify variable features for each dataset independently
dbdbbrain.list <- lapply(X = dbdbbrain.list, FUN = function(x) {
  x <- NormalizeData(x)
  x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})

# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = dbdbbrain.list)

brain.anchors <- FindIntegrationAnchors(object.list = dbdbbrain.list, anchor.features = features)

# this command creates an 'integrated' data assay
brain.combined <- IntegrateData(anchorset = brain.anchors)

# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(brain.combined) <- "integrated"

# Run the standard workflow for visualization and clustering
brain.combined <- ScaleData(brain.combined, verbose = FALSE)
brain.combined <- RunPCA(brain.combined, npcs = 30, verbose = FALSE)
brain.combined <- RunUMAP(brain.combined, reduction = "pca", dims = 1:30)
brain.combined <- FindNeighbors(brain.combined, reduction = "pca", dims = 1:30)
brain.combined <- FindClusters(brain.combined, resolution = 0.75)

#Finding differential expressed features (biomarkers)
# find markers for every cluster compared to all remaining cells, report only the positive
# ones
brain.combined.markers <- FindAllMarkers(brain.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
brain.combined.markers %>% group_by(cluster) %>% top_n(n = 3, wt = avg_log2FC)
brain.combined.markers.LIST=unstack(brain.combined.markers, brain.combined.markers$gene ~ brain.combined.markers$cluster)


DER.UMI <- read.csv("DER-21_Single_cell_markergenes_UMI.csv", sep = ",", check.names = FALSE)
DER.UMI.LIST=unstack(DER.UMI, (DER.UMI$Gene) ~ DER.UMI$Cluster)
DER.UMI.LIST <- DER.UMI.LIST[-1]

# Create an object for wang annotation
brain.combined.wang=brain.combined
Filtered.Genes=unique(unlist(brain.combined.markers.LIST))

source("UseFulRfunction.R")

brain.combined.FisherTest.res.wang=lapply(brain.combined.markers.LIST,FisherTest.wang)

TMP.wang = matrix(unlist(brain.combined.FisherTest.res.wang), ncol = 25, byrow = TRUE)
colnames(TMP.wang)=names(DER.UMI.LIST)

TMP.LABELS.wang=CellTypeTest.wang(TMP.wang)
names(TMP.LABELS.wang)=names(brain.combined.FisherTest.res.wang)
wang.cluster.combined.ids = TMP.LABELS.wang
names(wang.cluster.combined.ids) = levels(brain.combined.wang)
brain.combined.wang = RenameIdents(brain.combined.wang,wang.cluster.combined.ids)
levels(brain.combined.wang)

# Cell chat
## Create cellchat object
DefaultAssay(brain.combined.wang) <- "RNA"
cellchat.brain <- createCellChat(brain.combined.wang, group.by = "ident")

# Setting ligand-receptor interaction database
CellChatDB <- CellChatDB.mouse # use CellChatDB.human if running on human data
showDatabaseCategory(CellChatDB)

# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)

CellChatDB.use <- CellChatDB# simply use the default CellChatDB
# set the used database in the object
cellchat.brain@DB <- CellChatDB.use

# subset the expression data of signaling genes for saving computation cost
cellchat.brain <- subsetData(cellchat.brain) # This step is necessary even if using the whole database
future::plan("multisession", workers = 4) # do parallel
cellchat.brain <- identifyOverExpressedGenes(cellchat.brain)
cellchat.brain <- identifyOverExpressedInteractions(cellchat.brain)

## Compute the communication probability and infer cellular communication network
cellchat.brain <- computeCommunProb(cellchat.brain)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat.brain <- filterCommunication(cellchat.brain, min.cells = 10)

# a data frame consisting of all the inferred cell-cell 
# communications at the level of ligands/receptors
df.net <- subsetCommunication(cellchat.brain)

'''
# gives the inferred cell-cell communications sending from 
# cell groups 1 and 2 to cell groups 4 and 5.
df.net <- subsetCommunication(cellchat, sources.use = c(1,2), targets.use = c(4,5))

# gives the inferred cell-cell communications mediated by signaling WNT and TGFb.
df.net <- subsetCommunication(cellchat, signaling = c("WNT", "TGFb"))
'''

## Infer the cell-cell communication at a signaling pathway level
# CellChat computes the communication probability on signaling pathway level 
# by summarizing the communication probabilities of all ligands-receptors 
# interactions associated with each signaling pathway.

# NB: The inferred intercellular communication network of each ligand-receptor 
# pair and each signaling pathway is stored in the slot 'net' and 'netP', respectively.

cellchat.brain <- computeCommunProbPathway(cellchat.brain)

## Calculate the aggregated cell-cell communication network
cellchat.brain <- aggregateNet(cellchat.brain)

## visualize the aggregated cell-cell communication network
# showing the number of interactions or the total interaction strength (weights) 
# between any two cell groups using circle plot
{r, fig.width=10,fig.height = 5, fig.wide = TRUE, fig.align = "center"}
groupSize <- as.numeric(table(cellchat.brain@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat.brain@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat.brain@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")


'''
setwd("~/Desktop/Applied_Genomics/BMEC/Cellchat")
pdf("circle_interaction_countandweight")
groupSize <- as.numeric(table(cellchat.brain@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat.brain@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat.brain@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
dev.off()
'''

# Due to the complicated cell-cell communication network, 
# we can examine the signaling sent from each cell group. 

# Here we also control the parameter `edge.weight.max` so that we 
# can compare edge weights between differet networks. 


pdf("edgeweights")
mat <- cellchat.brain@net$weight
par(mfrow = c(3, 4), mar = c(2, 2, 2, 2), xpd = TRUE)  # Adjusted plot margins
for (i in 1:nrow(mat)) {
  mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
  mat2[i, ] <- mat[i, ]
  netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = TRUE, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
dev.off()

pathways.show <- c("CXCL") 
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells 
vertex.receiver = seq(1,4) # a numeric vector. 
netVisual_aggregate(cellchat.brain, signaling = pathways.show,  vertex.receiver = vertex.receiver, layout = "hierarchy")

# Circle plot
par(mfrow=c(1,1))
netVisual_aggregate(cellchat.brain, signaling = pathways.show, layout = "circle")

# Chord diagram
par(mfrow=c(1,1))
netVisual_aggregate(cellchat.brain, signaling = pathways.show, layout = "chord")
# Heatmap
par(mfrow=c(1,1))
netVisual_heatmap(cellchat.brain, signaling = pathways.show, color.heatmap = "Reds")

'''
# Chord diagram
group.cellType <- c(rep("Endo", 4), rep("Per", 4), rep("Microglia", 4)) # grouping cell clusters into fibroblast, DC and TC cells
names(group.cellType) <- levels(cellchat.brain@idents)
netVisual_chord_cell(cellchat.brain, signaling = pathways.show, group = group.cellType, title.name = paste0(pathways.show, " signaling network"))
'''

### Compute the contribution of each ligand-receptor pair to the overall 
# signaling pathway and visualize cell-cell communication mediated by a 
# single ligand-receptor pair
pathways.show <- c("CXCL", "APP") 
netAnalysis_contribution(cellchat.brain, signaling = pathways.show)
